generator client {
  provider = "prisma-client-js"
  output   = "./client"
}

datasource db {
  provider     = "mysql"
  url          = env("DB_URL")
  relationMode = "prisma"
}

model Comment {
  sender      User     @relation(fields: [senderId], references: [id])
  senderId    String
  page        Page     @relation(fields: [pageId], references: [id])
  pageId      String
  id          Int      @id @default(autoincrement())
  content     String
  timeCreated DateTime @default(now())

  @@index([senderId])
  @@index([pageId])
}

model Page {
  site     Site      @relation(fields: [siteId], references: [id])
  siteId   String
  id       String    @id
  comments Comment[]

  @@index([siteId])
}

model Site {
  owner              User               @relation(fields: [ownerId], references: [id])
  ownerId            String
  name               String
  id                 String             @id
  pageIdentification PageIdentification
  reactionsEnabled   Boolean
  commentBoxAbove    Boolean
  pages              Page[]

  @@index([ownerId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  site          Site[]
  comments      Comment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum PageIdentification {
  urlPath
  fullUrl
  pageTitleHtmlTag
  pageTitleMetaOg
}
